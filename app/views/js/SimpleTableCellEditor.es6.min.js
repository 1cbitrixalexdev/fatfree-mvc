"use strict"; window.onload = function () { if (!window.jQuery) throw "jQuery is not loaded" }; var SimpleTableCellEdition = function (e, t) { this.Elem = e, this.oldContent = $(e).html(), this.oldValue = t.internals.extractValue(e), this.cellParams = t }, SimpleTableCellEditor = function () { function e(e, t) { var i = this; i.EditionEndOrigin = { OutsideTable: 1, AnotherCell: 2 }, void 0 === e && (e = "table"), this.tableId = e, this.params = i._GetExtendedEditorParams(t), this.CellEdition = null, this._TryHandleDataTableReloadEvent(), $(document).mouseup(function (e) { var t = $("#" + i.tableId); t.is(e.target) || 0 !== t.has(e.target).length || i._FreeCurrentCell(i.EditionEndOrigin.OutsideTable) }) } var t = e.prototype; return t.SetEditable = function (e, t) { var i = this; if (i._isValidElem(e)) { var l = i._GetExtendedCellParams(t); $(e).on("click", function (e) { $(this).hasClass(i.params.inEditClass) || i._EditCell(this, l) }), $(e).on("keydown", function (e) { $(this).hasClass(i.params.inEditClass) && i._HandleKeyPressed(e.which, this, l) }) } }, t.SetEditableClass = function (e, t) { var i = this, l = i._GetExtendedCellParams(t); $("#" + this.tableId).on("click", "td." + e + ":not(." + i.params.inEditClass + ")", function () { i._EditCell(this, l) }), $("#" + this.tableId).on("keydown", "td." + e + "." + i.params.inEditClass, function (e) { i._HandleKeyPressed(e.which, this, l) }) }, t._HandleKeyPressed = function (e, t, i) { i.keys.validation.includes(e) ? this._FreeCell(t, i, !0) : i.keys.cancellation.includes(e) && this._FreeCell(t, i, !1) }, t._EditCell = function (e, t) { if (!this._FireOnEditEnterEvent(e).isDefaultPrevented()) { this._FreeCurrentCell(this.EditionEndOrigin.AnotherCell), this.CellEdition = new SimpleTableCellEdition(e, t), this.isDataTable && (this.CellEdition.cellIndex = $("#" + this.tableId).DataTable().cell($(e)).index()); var i = t.internals.extractValue(e); $(e).addClass(this.params.inEditClass), t.internals.renderEditor(e, i), this._FireOnEditEnteredEvent(e, i) } }, t._EndEditCell = function (e, t) { this._FreeCell(e, t, !0) }, t._CancelEditCell = function (e, t) { this._FreeCell(e, t, !1) }, t._FreeCell = function (e, t, i) { if (this._isValidElem(e) && null !== this.CellEdition && !this._FireOnEditExitEvent(e, this.CellEdition.oldValue).isDefaultPrevented()) { var l = t.internals.extractEditorValue(e); $(e).removeClass(this.params.inEditClass), $(e).html(""); var n = t.formatter(l); t.validation(l) && this.CellEdition.oldValue !== n || (i = !1), this._FireOnEditExitedEvent(e, this.CellEdition.oldValue, n, i), i ? (t.internals.renderValue(e, n), this._FireEditedEvent(e, this.CellEdition.oldValue, n)) : $(e).html(this.CellEdition.oldContent), this.CellEdition = null } }, t._FreeCurrentCell = function (e) { var t = this._GetCurrentEdition(); if (null !== t) { var i = !0; e === this.EditionEndOrigin.OutsideTable && t.cellParams.behaviour.outsideTableClickCauseCancellation && (i = !1), e === this.EditionEndOrigin.AnotherCell && t.cellParams.behaviour.anotherCellClickCauseCancellation && (i = !1), this._FreeCell(t.Elem, t.cellParams, i) } }, t._GetCurrentEdition = function () { return null === this.CellEdition ? null : this.CellEdition }, t._GetExtendedEditorParams = function (e) { return $.extend(!0, {}, this._GetDefaultEditorParams(), e) }, t._GetExtendedCellParams = function (e) { return $.extend(!0, {}, this._GetDefaultCellParams(), e) }, t._FireOnEditEnterEvent = function (e) { var t = jQuery.Event("cell:onEditEnter", { element: e }); return $("#" + this.tableId).trigger(t), t }, t._FireOnEditEnteredEvent = function (e, t) { $("#" + this.tableId).trigger({ type: "cell:onEditEntered", element: e, oldValue: t }) }, t._FireOnEditExitEvent = function (e, t) { var i = jQuery.Event("cell:onEditExit", { element: e, oldValue: t }); return $("#" + this.tableId).trigger(i), i }, t._FireOnEditExitedEvent = function (e, t, i, l) { $("#" + this.tableId).trigger({ type: "cell:onEditExited", element: e, newValue: i, oldValue: t, applied: l }) }, t._FireEditedEvent = function (e, t, i) { $("#" + this.tableId).trigger({ type: "cell:edited", element: e, newValue: i, oldValue: t }) }, t._TryHandleDataTableReloadEvent = function () { var e = this; this.isDataTable = !1; try { $.fn.DataTable.isDataTable("#" + e.tableId) && (e.isDataTable = !0) } catch (e) { return } e.isDataTable && $("#" + e.tableId).on("draw.dt", function () { if (null !== e.CellEdition && null !== e.CellEdition.Elem) { var t = $("#" + e.tableId).DataTable().cell(e.CellEdition.cellIndex).node(); e._EditCell(t, e.CellEdition.cellParams) } }) }, t._GetDefaultEditorParams = function () { return { inEditClass: "inEdit" } }, t._GetDefaultCellParams = function () { return { validation: function (e) { return !0 }, formatter: function (e) { return e }, keys: { validation: [13], cancellation: [27] }, behaviour: { outsideTableClickCauseCancellation: !1, anotherCellClickCauseCancellation: !1 }, internals: this._GetDefaultInternals() } }, t._GetDefaultInternals = function () { return { renderValue: function (e, t) { $(e).text(t) }, renderEditor: function (e, t) { $(e).html("<input type='text' style=\"width:100%; max-width:none\">"); var i = $(e).find("input"); i.focus(), i.val(t) }, extractEditorValue: function (e) { return $(e).find("input").val() }, extractValue: function (e) { return $(e).text() } } }, t._isValidElem = function (e) { return null != e && $(e).length > 0 }, e }();